version: 2

macros:
  - name: get_days_from_hours
    description: Convert hours to days.
    arguments:
      - name: hours
        description: Number of hours.
        type: integer
  - name: format_transaction_type
    description: Returns a standardized transaction type string based on the raw transaction event type.
    arguments:
      - name: transaction_type
        type: string
        description: >
          The column or value containing the raw transaction type.
      - name: column_name
        type: string
        description: >
          The name to use for the resulting column in the SELECT statement.
  - name: age_group
    description: |
      Categorizes an age value into a standard demographic group using a SQL CASE statement.
      The age_group macro takes an age value and returns a demographic segment label as a string:
        - '18-25' for ages less than 26
        - '26-35' for ages 26-35
        - '36-45' for ages 36-45
        - '46-55' for ages 46-55
        - '56-65' for ages 56-65
        - '66-75' for ages 66-75
        - '76-85' for ages 76-85
        - '86+'   for ages 86 and above
    arguments:
      - name: age
        type: integer
        description: >
          The age of the customer.
      - name: column_name
        type: string
        description: |
          The name to assign to the resulting demographic group column in the SQL output.
          This will appear as the alias in the SELECT clause.
  - name: income_group
    description: |
      Categorizes an income value into custom income group ranges using a SQL CASE statement.
      The income_group macro receives an income value and returns an income segment label as a string:
        - '<30k' for income less than 30000
        - '30-45k' for income from 30000 up to 44999
        - '45-60k' for income from 45000 up to 59999
        - '60-75k' for income from 60000 up to 74999
        - '75-90k' for income from 75000 up to 89999
        - '90-105k' for income from 90000 up to 104999
        - '> 105k' for income of 105000 or more
    arguments:
      - name: income
        type: float64
        description: >
          Income of the customer.
      - name: column_name
        type: string
        description: |
          The name to assign to the resulting income group column in the SQL output.
          This will appear as the alias in the SELECT clause.
  - name: subscription_years_group
    description: |
      Categorizes the customer subscription date into groups based on the number of years since the customer subscribed.
      The subscription_years_group macro receives a date column (customer_subscribed_date) and returns a group label according to how many years have passed since subscription:
        - '0-4'   for subscriptions of less than 5 years
        - '5-6'   for subscriptions of 5 or 6 years
        - '7-8'   for subscriptions of 7 or 8 years
        - '9-10'  for subscriptions of 9 or 10 years
        - '11-12' for subscriptions of 11 or 12 years
        - '13+'   for subscriptions of 13 years or more
    arguments:
      - name: customer_subscribed_date
        type: date
        description: >
          The date column representing the date the customer subscribed.
      - name: column_name
        type: string
        description: |
          The name to assign to the resulting subscription years group column in the SQL output.
          This will appear as the alias in the SELECT clause.
  - name: get_date_parts
    description: |
      Extracts year, month, day, and day of week from a given date.
      The extract_date_parts macro simplifies creating multiple time-based columns by expanding a date field into four separate columns with a chosen prefix:
        - `<prefix>_year`: Year part of the date.
        - `<prefix>_month`: Month part of the date (1-12).
        - `<prefix>_day`: Day of the month (1-31).
        - `<prefix>_dayofweek`: Day of the week (1=Sunday, 7=Saturday in BigQuery).
      This macro is especially useful for time-based aggregations, filtering, and reporting.
    arguments:
      - name: date_column
        type: date
        description: >
          The date column from which to extract the date parts.
      - name: prefix
        type: string
        description: |
          The prefix to use for the resulting columns (e.g., 'subscribed').
  - name: response_rate
    description: |
      Calculates a response rate percentage, rounded to two decimal places.
      The macro divides the number of responses by the total and multiplies by 100.
      If `total` is 0, it returns 0 instead of NULL or an error, ensuring safe division.
    arguments:
      - name: responses
        type: integer
        description: |
          Numeric expression representing the number of responses (e.g., viewed, completed, transaction, received).
      - name: total
        type: integer
        description: |
          Numeric expression representing the total opportunities (e.g., view_rate).
      - name: column_name
        type: string
        description: |
          The name to assign to the resulting percentage column in the SQL output. This will appear as the alias in the SELECT clause.
  - name: countif_status
    description: Returns the count of rows where the specified column matches the given status value, with an alias for the output column.
    arguments:
      - name: column
        type: string
        description: The column or SQL expression to be evaluated.
      - name: status
        type: string
        description: The value to match within the column.
      - name: alias
        type: string
        description: The alias to use for the resulting column in the SQL output.
  - name: customer_segment
    description: |
      Classifies the customer based on the type of events performed.
      Returns:
        - 'Organic Driven' if only organic events.
        - 'Promo Driven' if only promotion events.
        - 'Mixed' if both.
        - 'Inactive' if no events.
    arguments:
      - name: organic_events
        type: integer
        description: Name of the column with the count of organic events.
      - name: promo_events
        type: integer
        description: Name of the column with the count of promotion events.
      - name: column_name
        type: string
        description: Name of the output column.
  - name: activity_segment
    description: |
      Segments the customer based on the number of promo transactions.
      Returns:
        - 'Never Purchased', 'Minimal Activity', 'Low Activity', 'Medium Activity', 'High Activity'
    arguments:
      - name: promos_transaction
        type: integer
        description: Name of the column with the count of promo transactions.
      - name: column_name
        type: string
        description: Name of the output column.
  - name: engagement_segment
    description: |
      Segments customer engagement based on the number of total transactions.
      Returns:
        - 'Highly Engaged', 'Moderately Engaged', 'Lightly Engaged', 'Minimally Engaged', 'Not Engaged'
    arguments:
      - name: total_events
        type: integer
        description: Name of the column with the count of total transactions.
      - name: column_name
        type: string
        description: Name of the output column.
  - name: promo_responsiveness_segment
    description: |
      Segments customers according to the completion rate of received promos:
        - 'Highly Responsive' (>= 70%)
        - 'Moderately Responsive' (>= 40%)
        - 'Low Responsive' (>= 10%)
        - 'Non-Responsive' (< 10%)
        - 'No Promos Received' (received = 0)
    arguments:
      - name: promos_received
        type: integer
        description: Name of the column with the count of promos received.
      - name: completion_received_rate
        type: float64
        description: Name of the column with the completion rate of received promos.
      - name: column_name
        type: string
        description: Name of the output column.
  - name: avg_metric
    description: Returns a SQL expression for the average of a numeric column, rounded to two decimal places, and assigns it a custom alias.
    arguments:
      - name: column_name
        description: Name of the column to average.
      - name: alias
        description: Alias to be assigned to the resulting column.
  - name: channel_efficiency_tier
    description: |
      Produces a SQL CASE statement that classifies channels into efficiency tiers based on their view rate.
      The efficiency tiers are: 'Highly Efficient', 'Moderately Efficient', 'Low Efficiency', or 'Inefficient'.
    arguments:
      - name: view_rate
        description: Name of the view rate column to evaluate.
      - name: column_name
        description: Alias to be assigned to the resulting column.
  - name: promo_type_optimization
    description: |
      Generates a SQL CASE statement that classifies promotion types as "Optimized" or "Standard" depending on the promotion type and a minimum view rate threshold.
      - 'BOGO Optimized' for BOGO promotions with view rate >= 30
      - 'Discount Optimized' for discount promotions with view rate >= 35
      - 'Info Optimized' for informational promotions with view rate >= 50
      - 'Standard' otherwise
    arguments:
      - name: promo_type
        description: Name of the promo type column to evaluate.
      - name: view_rate
        description: Name of the view rate column to evaluate.
      - name: column_name
        description: Alias to be assigned to the resulting column.
